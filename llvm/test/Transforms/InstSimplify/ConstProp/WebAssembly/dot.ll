; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5

; RUN: opt -passes=instsimplify -S < %s | FileCheck %s

; Test that intrinsics wasm dot call are constant folded

target triple = "wasm32-unknown-unknown"


define <4 x i32> @dot_zero() {
; CHECK-LABEL: define <4 x i32> @dot_zero() {
; CHECK-NEXT:    ret <4 x i32> zeroinitializer
;
  %res = tail call <4 x i32> @llvm.wasm.dot(<8 x i16> zeroinitializer, <8 x i16> zeroinitializer)
  ret <4 x i32> %res
}

; a               =   1    2    3    4    5    6    7    8
; b               =   1    2    3    4    5    6    7    8
; k1|k2 = a * b   =   1    4    9   16   25   36   49   64
; k1 + k2         =   (1+25) |  (4+36) | (9+49)  | (16+64)
; result          =    26    |   40    |   58    |   80
define <4 x i32> @dot_nonzero() {
; CHECK-LABEL: define <4 x i32> @dot_nonzero() {
; CHECK-NEXT:    ret <4 x i32> <i32 26, i32 40, i32 58, i32 80>
;
  %res = tail call <4 x i32> @llvm.wasm.dot(<8 x i16> <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8>, <8 x i16> <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8>)
  ret <4 x i32> %res
}

define <4 x i32> @dot_doubly_negative() {
; CHECK-LABEL: define <4 x i32> @dot_doubly_negative() {
; CHECK-NEXT:    ret <4 x i32> splat (i32 2)
;
  %res = tail call <4 x i32> @llvm.wasm.dot(<8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>)
  ret <4 x i32> %res
}


