; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -verify-machineinstrs -disable-wasm-fallthrough-return-opt -wasm-disable-explicit-locals -wasm-keep-registers -mattr=+simd128 | FileCheck %s

target triple = "wasm64"

define i32 @all_true_16_i8(<16 x i8> %v) {
; CHECK-LABEL: all_true_16_i8:
; CHECK:         .functype all_true_16_i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i8x16.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %1 = icmp eq <16 x i8> %v, zeroinitializer
  %2 = bitcast <16 x i1> %1 to i16
  %3 = icmp eq i16 %2, 0
  %conv3 = zext i1 %3 to i32
  ret i32 %conv3
}


define i32 @all_true_4_i32(<4 x i32> %v) {
; CHECK-LABEL: all_true_4_i32:
; CHECK:         .functype all_true_4_i32 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32x4.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %1 = icmp eq <4 x i32> %v, zeroinitializer
  %2 = bitcast <4 x i1> %1 to i4
  %3 = icmp eq i4 %2, 0
  %conv3 = zext i1 %3 to i32
  ret i32 %conv3
}


define i32 @all_true_8_i16(<8 x i16> %v) {
; CHECK-LABEL: all_true_8_i16:
; CHECK:         .functype all_true_8_i16 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i16x8.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %1 = icmp eq <8 x i16> %v, zeroinitializer
  %2 = bitcast <8 x i1> %1 to i8
  %3 = icmp eq i8 %2, 0
  %conv3 = zext i1 %3 to i32
  ret i32 %conv3
}


define i32 @all_true_2_i64(<2 x i64> %v) {
; CHECK-LABEL: all_true_2_i64:
; CHECK:         .functype all_true_2_i64 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i64x2.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %1 = icmp eq <2 x i64> %v, zeroinitializer
  %2 = bitcast <2 x i1> %1 to i2
  %3 = icmp eq i2 %2, 0
  %conv3 = zext i1 %3 to i32
  ret i32 %conv3
}
